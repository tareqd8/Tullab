version: '3.8'

services:
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - SESSION_SECRET=${SESSION_SECRET}
      - PORT=3000
      - CORS_ORIGINS=${CORS_ORIGINS}
    # SECURITY: No port mapping - access only via nginx reverse proxy
    restart: unless-stopped
    depends_on:
      - postgres
    networks:
      - tollab-network
    volumes:
      - ./uploads:/app/uploads

  admin:
    build:
      context: .
      dockerfile: apps/admin/Dockerfile
    environment:
      - NODE_ENV=production
    # SECURITY: No port mapping - access only via nginx reverse proxy
    restart: unless-stopped
    networks:
      - tollab-network

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-tollab}
      - POSTGRES_USER=${POSTGRES_USER:-tollab}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    # DO NOT expose database ports in production - security vulnerability
    # Access via internal network only or SSH tunnel if needed
    restart: unless-stopped
    networks:
      - tollab-network

  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
      - admin
    restart: unless-stopped
    networks:
      - tollab-network

volumes:
  postgres_data:

networks:
  tollab-network:
    driver: bridge